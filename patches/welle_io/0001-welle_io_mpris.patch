diff --git a/src/backend.pri b/src/backend.pri
index 0a3c858..fe7aca6 100644
--- a/src/backend.pri
+++ b/src/backend.pri
@@ -7,19 +7,22 @@ Release: QMAKE_LFLAGS	+=  -O3
 DEFINES += DABLIN_AAC_FAAD2
 
 unix:!macx:!android: {
-    INCLUDEPATH	+= /usr/local/include
+# don't include from the system path.
+# this break embedded compiling
+#    INCLUDEPATH	+= /usr/local/include
     LIBS    += -lfftw3f
     LIBS    += -lusb-1.0
     LIBS    += -ldl
     LIBS    += -lfaad
     LIBS    += -lmp3lame
-    LIBS    += -lmpg123
-    CONFIG  += airspy
-    CONFIG  += rtl_sdr
-    CONFIG  += soapysdr
+#    LIBS    += -lmpg123
+    CONFIG  +=  mpg123_builtin
 
-#    CONFIG  += mpg123_builtin
+#    CONFIG  += airspy
+    CONFIG  += rtl_sdr
+#    CONFIG  += soapysdr
 #    CONFIG  += libfaad_builtin
+    CONFIG  += mpris
 }
 
 win32: {
@@ -254,6 +257,7 @@ libfaad_builtin {
 mpg123_builtin {
 #    DEFINES   += MPG123
     DEFINES += OPT_GENERIC
+    DEFINES += MPG123_NO_LARGENAME
 
     INCLUDEPATH += $$PWD/libs/mpg123
 
@@ -308,6 +312,12 @@ rtl_sdr {
     LIBS       += -lrtlsdr
 }
 
+mpris {
+    CONFIG += link_pkgconfig
+    PKGCONFIG += dbusextended-qt5 mpris-qt5
+    DEFINES += HAVE_MPRIS
+}
+
 soapysdr {
     DEFINES    += HAVE_SOAPYSDR
     HEADERS    += $$PWD/input/soapy_sdr.h
diff --git a/src/backend/dab_decoder.cpp b/src/backend/dab_decoder.cpp
index fdc82c3..7a4e092 100644
--- a/src/backend/dab_decoder.cpp
+++ b/src/backend/dab_decoder.cpp
@@ -163,7 +163,7 @@ size_t MP2Decoder::DecodeFrame(uint8_t **data) {
 	ProcessUntouchedStream(header, body_data, body_bytes);
 
 	size_t frame_len;
-	mpg_result = mpg123_framebyframe_decode(handle, nullptr, data, &frame_len);
+    mpg_result = mpg123_framebyframe_decode(handle, nullptr, data, &frame_len);
 	if(mpg_result != MPG123_OK)
 		throw std::runtime_error("MP2Decoder: error while mpg123_framebyframe_decode: " + std::string(mpg123_plain_strerror(mpg_result)));
 
diff --git a/src/welle-gui/radio_controller.cpp b/src/welle-gui/radio_controller.cpp
index 6e4e1a5..860dc27 100644
--- a/src/welle-gui/radio_controller.cpp
+++ b/src/welle-gui/radio_controller.cpp
@@ -33,6 +33,7 @@
 #include <QDebug>
 #include <QSettings>
 #include <QStandardPaths>
+#include <QVariantMap>
 #include <stdexcept>
 
 #include "radio_controller.h"
@@ -54,6 +55,9 @@ CRadioController::CRadioController(QVariantMap& commandLineOptions, DABParams& p
     , commandLineOptions(commandLineOptions)
     , dabparams(params)
     , audioBuffer(2 * AUDIOBUFFERSIZE)
+#ifdef HAVE_MPRIS
+    , mpris(this)
+#endif
     , audio(audioBuffer)
 {
     // Init the technical data
@@ -73,8 +77,50 @@ CRadioController::CRadioController(QVariantMap& commandLineOptions, DABParams& p
     qRegisterMetaType<dab_date_time_t>("dab_date_time_t");
     connect(this, &CRadioController::dateTimeUpdated,
             this, &CRadioController::displayDateTime);
+
+#ifdef HAVE_MPRIS
+    connect(&mpris, SIGNAL(nextRequested()),
+            this, SLOT(mpris_nextRequested()));
+    connect(&mpris, SIGNAL(previousRequested()),
+            this, SLOT(mpris_previousRequested()));
+    connect(&mpris, SIGNAL(volumeChanged()),
+            this, SLOT(mpris_volumeChanged()));
+    mpris.setServiceName("Welle-IO");
+    mpris.setIdentity("Welle-IO");
+    mpris.setCanControl(true);
+    mpris.setCanGoNext(true);
+    mpris.setCanGoPrevious(true);    
+
+    mpris.setPlaybackStatus(Mpris::PlaybackStatus::Playing);
+    mpris.setLoopStatus(Mpris::LoopStatus::Track);
+    mpris.setHasTrackList(false);
+
+    QVariantMap m = mpris.metadata();
+    m["Album"] = "My Title";
+    m["Title"] = "My Album";
+    mpris.setMetadata(m);
+#endif
+}
+
+#ifdef HAVE_MPRIS
+#include <QDebug>
+void CRadioController::mpris_nextRequested()
+{
+    printf("mpris_nextRequested()\n");
+}
+
+void CRadioController::mpris_previousRequested()
+{
+    printf("mpris_previousRequested()\n");
 }
 
+void CRadioController::mpris_volumeChanged()
+{
+    printf("mpris_volumeChanged() %d\n",mpris.volume());
+}
+
+#endif
+
 void CRadioController::closeDevice()
 {
     qDebug() << "RadioController:" << "Close device";
@@ -195,6 +241,12 @@ void CRadioController::setStation(QString Station, bool Force)
         currentTitle = Station;
         emit titleChanged();
 
+#ifdef HAVE_MPRIS
+        QVariantMap m = mpris.metadata();
+        m["Title"] = Station.toStdString().c_str();
+        mpris.setMetadata(m);
+#endif
+
         // Wait if we found the station inside the signal
         stationTimer.start(1000);
 
@@ -734,6 +786,12 @@ void CRadioController::onServiceDetected(uint32_t SId, const std::string& label)
 
 void CRadioController::onNewEnsembleName(const std::string& name)
 {
+#ifdef HAVE_MPRIS
+    QVariantMap m = mpris.metadata();
+    m["Album"] = name.c_str();
+    mpris.setMetadata(m);
+#endif
+
     emit ensembleNameUpdated(QString::fromStdString(name));
 }
 
diff --git a/src/welle-gui/radio_controller.h b/src/welle-gui/radio_controller.h
index a87d303..c71bb8f 100644
--- a/src/welle-gui/radio_controller.h
+++ b/src/welle-gui/radio_controller.h
@@ -40,6 +40,11 @@
 #include <QVariantMap>
 #include <mutex>
 
+#ifdef HAVE_MPRIS
+#include <Mpris>
+#include <MprisPlayer>
+#endif
+
 #include "audio_output.h"
 #include "dab-constants.h"
 #include "radio-receiver.h"
@@ -219,12 +224,22 @@ private:
     QString autoChannel;
     QString autoStation;
 
+#ifdef HAVE_MPRIS
+    MprisPlayer mpris;
+#endif
+
 public slots:
     void nameofEnsemble(const QString&v);
     void setErrorMessage(QString Text);
     void setErrorMessage(const std::string& head, const std::string& text = "");
     void setInfoMessage(QString Text);
 
+#ifdef HAVE_MPRIS
+    void mpris_nextRequested();
+    void mpris_previousRequested();
+    void mpris_volumeChanged();
+#endif
+
 private slots:
     void stationTimerTimeout(void);
     void channelTimerTimeout(void);
